1：是一个客户端的负载工具，Ribbon客户端组件提供了一套完整的配置，如超时，重试，通过 load balancer 获取服务提供所有的机器实例
   Ribbon会自动基于某种某规则（轮询，随机） 去调用这些服务，Ribbon也可以实现我们自己的负载算法；
2：是一个客户端的负载均衡，通过消费端进行获取提供者的地址；
3：F5 很贵，大公司用得起，了解下？
4：把eureka的服务拉去到本地，然后通过算法去访问哪一个实例；
5：三板斧：1 加入依赖，2 加配置；
6：Restlet client  类似 postman
7：从ip+port 调用服务，变成了 微服务调用，通过服务名字 去调用
8：规则irule 的结构图使用的策略模式（设计模式）
9：Ribbon会把eureka拉到本地 三十秒同步一次默认
10：feign 调用，日志，拦截器
10：feign 是netfix 开发的声明试，模板化的http客户端，可以帮助我们更加优雅的调用httpapi
11：写一个接口，脑袋上写一个注解 就可以使用了 
12：官网：springcloud.cc
13:分库分表和读写分离区别：分库分表分担写压力，读写分离解决因为写而影响的查询效率
14：eureka client 是到eureka连接中心注册，生产者负责注册服务，消费者负责获取服务消费；
15：feign的调用在在consumer端，服务只是一个单纯的rest 服务注册到了eureka，feign通过开启eureka客户端，扫描feign下的包，完成依赖注入使用
16：feign调用需要注意的是 get 与 post 接口编写，保证feign的接口写的方式与服务提供者方式相同，算是不是特别友好的地方
      get @PathVariable("userId") String userId  post @RequestParam("userId") String userId，当然还有其他方式

问题（1）
如果通过客户端做负载均衡，如果有一台服务挂掉了，是否会影响服务的调用，是否会及时更新客户端缓存；
问题（2）
zookeeper作为服务端负载均衡，那么客户端与zookeeper之间的调用时怎样的呢，不是先加载列表 到缓存 按照缓存去做调用么？
 